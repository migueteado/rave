// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Country {
  code                                       String                                       @id @unique
  name                                       String
}

model Currency {
  code                                       String                                       @id @unique
  name                                       String
  symbol                                     String
}

enum MeasurementType {
  AREA
  LENGTH
  MASS
  VOLUME
  QUANTITY
}

model MeasurementUnit {
  code                                       String                                       @id @unique
  name                                       String
  type                                       MeasurementType
}

enum EventType {
  CREATED
  UPDATED
  DELETED
}

model Event {
  dateCreated                                DateTime                                     @default(now())
  eventType                                  EventType
  id                                         String                                       @id @default(cuid())
  model                                      String
  payload                                    Json
}

// User model logic and dependencies
model User {
  dateCreated                                DateTime                                     @default(now())
  dateUpdated                                DateTime                                     @updatedAt
  email                                      String                                       @unique
  id                                         String                                       @id @default(cuid())
  name                                       String?
  password                                   String

  permissions                                UserPermissionOnUser[]
}

enum UserPermission {
  USER_SELF_READ
  USER_SELF_UPDATE
  USER_SELF_DELETE
  USER_READ
  USER_CREATE
  USER_UPDATE
  USER_DELETE
  CUSTOMER_READ
  CUSTOMER_CREATE
  CUSTOMER_UPDATE
  CUSTOMER_DELETE
  PRODUCT_READ
  PRODUCT_CREATE
  PRODUCT_UPDATE
  PRODUCT_DELETE
}

model UserPermissionOnUser {
  userId                    String
  dateCreated               DateTime                      @default(now())
  dateUpdated               DateTime                      @updatedAt
  id                        String                        @id @default(uuid())

  permission                UserPermission
  user                      User                          @relation(fields: [userId], references: [id])

  @@unique([userId, permission])
}

// Customer model logic and dependencies

model Customer {
  dateCreated                                DateTime                                     @default(now())
  dateUpdated                                DateTime                                     @updatedAt
  email                                      String                                       @unique
  firstName                                  String?
  guest                                      Boolean                                      @default(false)
  id                                         String                                       @id @default(cuid())
  lastName                                   String?
  name                                       String?
  optIn                                      Boolean                                      @default(true)
  phone                                      String? 
  points                                     Int                                   

  address                                    CustomerAddress[]
  categories                                 CustomerCategory[]
  notes                                      CustomerNotes[]
}

model CustomerNotes {
  customerId                                 String
  dateCreated                                DateTime                                     @default(now())
  dateUpdated                                DateTime                                     @updatedAt
  id                                         String                                       @id @default(cuid())
  note                                       String

  customer                                   Customer                                     @relation(fields: [customerId], references: [id])
}

model CustomerAddress {
  city                                       String
  countryCode                                String
  country                                    String
  customerId                                 String                                       @unique
  default                                    Boolean                                      @default(false)
  dateCreated                                DateTime                                     @default(now())
  dateUpdated                                DateTime                                     @updatedAt
  id                                         String                                       @id @default(cuid())
  line1                                      String
  line2                                      String?
  note                                       String?
  phone                                      String
  postalCode                                 String
  state                                      String

  customer                                   Customer                                     @relation(fields: [customerId], references: [id])
}

model CustomerCategory {
  dateCreated                                DateTime                                     @default(now())
  dateUpdated                                DateTime                                     @updatedAt
  id                                         String                                       @id @default(cuid())
  name                                       String

  customers                                  Customer[]
}